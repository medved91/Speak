using Microsoft.EntityFrameworkCore;
using Speak.Telegram.CommonContracts;
using Speak.Telegram.CutieFeature.Contracts.Requests;
using Speak.Telegram.Postgres;
using Telegram.Bot;
using Telegram.Bot.Types;

namespace Speak.Telegram.CutieFeature;

internal class SendMissionResultFeatureHandler : ITelegramFeatureHandler<SendMissionResultFeatureRequest, Message>
{
    private readonly TelegramBotDbContext _dbContext;
    private readonly ITelegramBotClient _botClient;

    private readonly string[] _missionCompletePhrases = { 
        "–û—Ç–ª–∏—á–Ω–æ!", "–ö—Ä–∞—Å–æ—Ç–∞!", "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!", "–ü–æ—Ç—Ä—è—Å–∞—é—â–µ!", "–ü—Ä–æ—Å—Ç–æ –æ—Ñ–∏–≥–µ–Ω–Ω–æ!", "–û–±–∞–ª–¥–µ–Ω–Ω–æ!", "–ñ–∂–æ—à—å!", "–ú–æ–ª–æ—Ä–∏–∫!",
        "–û—á–µ–Ω—Ç —Ö–æ—Ä–æ—à–æ!", "–í–æ—Ç —ç—Ç–æ —è –ø–æ–Ω–∏–º–∞—é!", "–ö–ª–∞—Å—Å!", "–ë–∞–ª–¥–µ–∂!", "–ü—Ä–∏–Ω—è—Ç–æ!", 
        "üëç", "üëå", "ü§ü", "ü§ò", "ü´Ä", "üí™", "üòç", "üî•", "üçì"
    };

    public SendMissionResultFeatureHandler(TelegramBotDbContext dbContext, ITelegramBotClient botClient)
    {
        _dbContext = dbContext;
        _botClient = botClient;
    }

    public async Task<Message> Handle(SendMissionResultFeatureRequest request, CancellationToken ct)
    {
        var lastChosenCutie = await _dbContext.ChosenCuties
            .Include(c => c.Player)
            .Include(c => c.Mission)
            .OrderByDescending(c => c.WhenChosen)
            .FirstOrDefaultAsync(c => c.Player.ChatId == request.ChatId, ct);
        
        if (lastChosenCutie == null || lastChosenCutie.ElectionMessageId != request.RepliedToBotMessageId) 
            return new Message();

        if(lastChosenCutie.Player.TelegramUsername != request.UsernameWhoSentPhoto) 
            return await _botClient.SendTextMessageAsync(request.ChatId,
                "–ü—Ä–æ—Å—Ç–∏, –Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å–ª–∞—Ç—å –õ–∞–ø—É—Å–µ—á–∫–∞, –∞ –Ω–µ —Ç—ã >:(",
                replyToMessageId: request.UserReplyMessageId,
                cancellationToken: ct);
        
        if(lastChosenCutie.MissionResultMessageId.HasValue)
            return await _botClient.SendTextMessageAsync(request.ChatId,
                $"@{lastChosenCutie.Player.TelegramUsername} –¢—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ, –≤–æ—Ç:",
                replyToMessageId: lastChosenCutie.MissionResultMessageId,
                cancellationToken: ct);

        lastChosenCutie.MissionResultMessageId = request.UserReplyMessageId;

        await _dbContext.SaveChangesAsync(ct);

        var random = new Random();
        return await _botClient.SendTextMessageAsync(request.ChatId,
            _missionCompletePhrases[random.Next(_missionCompletePhrases.Length)],
            replyToMessageId: request.UserReplyMessageId,
            cancellationToken: ct);
    }
}